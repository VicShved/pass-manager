// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PassManagerService_Register_FullMethodName    = "/api.PassManagerService/Register"
	PassManagerService_Login_FullMethodName       = "/api.PassManagerService/Login"
	PassManagerService_PostCard_FullMethodName    = "/api.PassManagerService/PostCard"
	PassManagerService_GetCard_FullMethodName     = "/api.PassManagerService/GetCard"
	PassManagerService_PostLogPass_FullMethodName = "/api.PassManagerService/PostLogPass"
	PassManagerService_GetLogPass_FullMethodName  = "/api.PassManagerService/GetLogPass"
	PassManagerService_PostFile_FullMethodName    = "/api.PassManagerService/PostFile"
	PassManagerService_GetFile_FullMethodName     = "/api.PassManagerService/GetFile"
)

// PassManagerServiceClient is the client API for PassManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassManagerServiceClient interface {
	Register(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	PostCard(ctx context.Context, in *PostCardRequest, opts ...grpc.CallOption) (*PostDataResponse, error)
	GetCard(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetCardResponse, error)
	PostLogPass(ctx context.Context, in *PostLogPassRequest, opts ...grpc.CallOption) (*PostDataResponse, error)
	GetLogPass(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetLogPassResponse, error)
	PostFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PostFileRequest, PostDataResponse], error)
	GetFile(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFileResponse], error)
}

type passManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPassManagerServiceClient(cc grpc.ClientConnInterface) PassManagerServiceClient {
	return &passManagerServiceClient{cc}
}

func (c *passManagerServiceClient) Register(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, PassManagerService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, PassManagerService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerServiceClient) PostCard(ctx context.Context, in *PostCardRequest, opts ...grpc.CallOption) (*PostDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostDataResponse)
	err := c.cc.Invoke(ctx, PassManagerService_PostCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerServiceClient) GetCard(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCardResponse)
	err := c.cc.Invoke(ctx, PassManagerService_GetCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerServiceClient) PostLogPass(ctx context.Context, in *PostLogPassRequest, opts ...grpc.CallOption) (*PostDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostDataResponse)
	err := c.cc.Invoke(ctx, PassManagerService_PostLogPass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerServiceClient) GetLogPass(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetLogPassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogPassResponse)
	err := c.cc.Invoke(ctx, PassManagerService_GetLogPass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerServiceClient) PostFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PostFileRequest, PostDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PassManagerService_ServiceDesc.Streams[0], PassManagerService_PostFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PostFileRequest, PostDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PassManagerService_PostFileClient = grpc.ClientStreamingClient[PostFileRequest, PostDataResponse]

func (c *passManagerServiceClient) GetFile(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PassManagerService_ServiceDesc.Streams[1], PassManagerService_GetFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDataRequest, GetFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PassManagerService_GetFileClient = grpc.ServerStreamingClient[GetFileResponse]

// PassManagerServiceServer is the server API for PassManagerService service.
// All implementations must embed UnimplementedPassManagerServiceServer
// for forward compatibility.
type PassManagerServiceServer interface {
	Register(context.Context, *LoginRequest) (*LoginResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	PostCard(context.Context, *PostCardRequest) (*PostDataResponse, error)
	GetCard(context.Context, *GetDataRequest) (*GetCardResponse, error)
	PostLogPass(context.Context, *PostLogPassRequest) (*PostDataResponse, error)
	GetLogPass(context.Context, *GetDataRequest) (*GetLogPassResponse, error)
	PostFile(grpc.ClientStreamingServer[PostFileRequest, PostDataResponse]) error
	GetFile(*GetDataRequest, grpc.ServerStreamingServer[GetFileResponse]) error
	mustEmbedUnimplementedPassManagerServiceServer()
}

// UnimplementedPassManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPassManagerServiceServer struct{}

func (UnimplementedPassManagerServiceServer) Register(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPassManagerServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPassManagerServiceServer) PostCard(context.Context, *PostCardRequest) (*PostDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCard not implemented")
}
func (UnimplementedPassManagerServiceServer) GetCard(context.Context, *GetDataRequest) (*GetCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedPassManagerServiceServer) PostLogPass(context.Context, *PostLogPassRequest) (*PostDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLogPass not implemented")
}
func (UnimplementedPassManagerServiceServer) GetLogPass(context.Context, *GetDataRequest) (*GetLogPassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogPass not implemented")
}
func (UnimplementedPassManagerServiceServer) PostFile(grpc.ClientStreamingServer[PostFileRequest, PostDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PostFile not implemented")
}
func (UnimplementedPassManagerServiceServer) GetFile(*GetDataRequest, grpc.ServerStreamingServer[GetFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedPassManagerServiceServer) mustEmbedUnimplementedPassManagerServiceServer() {}
func (UnimplementedPassManagerServiceServer) testEmbeddedByValue()                            {}

// UnsafePassManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassManagerServiceServer will
// result in compilation errors.
type UnsafePassManagerServiceServer interface {
	mustEmbedUnimplementedPassManagerServiceServer()
}

func RegisterPassManagerServiceServer(s grpc.ServiceRegistrar, srv PassManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedPassManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PassManagerService_ServiceDesc, srv)
}

func _PassManagerService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManagerService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServiceServer).Register(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManagerService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManagerService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManagerService_PostCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServiceServer).PostCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManagerService_PostCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServiceServer).PostCard(ctx, req.(*PostCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManagerService_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServiceServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManagerService_GetCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServiceServer).GetCard(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManagerService_PostLogPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLogPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServiceServer).PostLogPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManagerService_PostLogPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServiceServer).PostLogPass(ctx, req.(*PostLogPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManagerService_GetLogPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServiceServer).GetLogPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManagerService_GetLogPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServiceServer).GetLogPass(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManagerService_PostFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PassManagerServiceServer).PostFile(&grpc.GenericServerStream[PostFileRequest, PostDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PassManagerService_PostFileServer = grpc.ClientStreamingServer[PostFileRequest, PostDataResponse]

func _PassManagerService_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PassManagerServiceServer).GetFile(m, &grpc.GenericServerStream[GetDataRequest, GetFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PassManagerService_GetFileServer = grpc.ServerStreamingServer[GetFileResponse]

// PassManagerService_ServiceDesc is the grpc.ServiceDesc for PassManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PassManagerService",
	HandlerType: (*PassManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _PassManagerService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _PassManagerService_Login_Handler,
		},
		{
			MethodName: "PostCard",
			Handler:    _PassManagerService_PostCard_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _PassManagerService_GetCard_Handler,
		},
		{
			MethodName: "PostLogPass",
			Handler:    _PassManagerService_PostLogPass_Handler,
		},
		{
			MethodName: "GetLogPass",
			Handler:    _PassManagerService_GetLogPass_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PostFile",
			Handler:       _PassManagerService_PostFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _PassManagerService_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api.proto",
}
